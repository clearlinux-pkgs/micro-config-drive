From 0cb30ff128b2e1bbe16b7e699b1aead045ee13d6 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Fri, 11 May 2018 23:20:41 +0000
Subject: [PATCH] Add OCI integration

---
 Makefile.am             |  14 ++-
 configure.ac            |   3 +-
 data/ucd-oci.service.in |  17 ++++
 docs/ucd-oci.1          |  43 ++++++++
 docs/ucd-oci.1.md       |  37 +++++++
 src/ucd-oci.c           | 219 ++++++++++++++++++++++++++++++++++++++++
 6 files changed, 330 insertions(+), 3 deletions(-)
 create mode 100644 data/ucd-oci.service.in
 create mode 100644 docs/ucd-oci.1
 create mode 100644 docs/ucd-oci.1.md
 create mode 100644 src/ucd-oci.c

diff --git a/Makefile.am b/Makefile.am
index e2921e6..01a7b15 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -17,6 +17,7 @@ EXTRA_DIST = \
 	data/ucd.service.in \
 	docs/ucd.1.md \
 	docs/ucd-aws.1.md \
+	docs/ucd-oci.1.md \
 	docs/cloud-config.5.md
 
 DISTCHECK_CONFIGURE_FLAGS =  \
@@ -25,11 +26,13 @@ DISTCHECK_CONFIGURE_FLAGS =  \
 dist_man_MANS = \
 	docs/ucd.1 \
 	docs/ucd-aws.1 \
+	docs/ucd-oci.1 \
 	docs/cloud-config.5
 
 bin_PROGRAMS = \
 	ucd \
-	ucd-aws
+	ucd-aws \
+	ucd-oci
 
 ucd_SOURCES = \
 	src/ccmodules.h \
@@ -69,6 +72,9 @@ ucd_SOURCES = \
 ucd_aws_SOURCES = \
 	src/ucd-aws.c
 
+ucd_oci_SOURCES = \
+	src/ucd-oci.c
+
 if ENABLE_WERROR
 AM_CFLAGS += -Werror
 endif
@@ -82,9 +88,11 @@ ucd_LDADD = $(GLIB_LIBS) $(YAML_LIBS) $(JSON_GLIB_LIBS) $(PARTED_LIBS) $(BLKID_L
 
 ucd_aws_CFLAGS = $(AM_CFLAGS)
 
+ucd_oci_CFLAGS = $(AM_CFLAGS)
+
 SYSTEMD_DIR=$(prefix)/lib/systemd/system/
 systemdsystemunitdir = @SYSTEMD_SYSTEMUNITDIR@
-systemdsystemunit_DATA = data/ucd.service data/ucd-aws.service
+systemdsystemunit_DATA = data/ucd.service data/ucd-aws.service data/ucd-oci.service
 
 systemdsystemunit-install-local:
 	mkdir -p $(DESTDIR)$(systemdsystemunitdir)/multi-user.target.wants/
@@ -101,6 +109,8 @@ docs/ucd.1: docs/ucd.1.md
 	ronn -m --pipe < docs/ucd.1.md > docs/ucd.1
 docs/ucd-aws.1: docs/ucd-aws.1.md
 	ronn -m --pipe < docs/ucd-aws.1.md > docs/ucd-aws.1
+docs/ucd-oci.1: docs/ucd-oci.1.md
+	ronn -m --pipe < docs/ucd-oci.1.md > docs/ucd-oci.1
 docs/cloud-config.5: docs/cloud-config.5.md
 	ronn -m --pipe < docs/cloud-config.5.md > docs/cloud-config.5
 docs: docs/ucd.1 docs/cloud-config.5
diff --git a/configure.ac b/configure.ac
index d56d6d0..f448ddf 100644
--- a/configure.ac
+++ b/configure.ac
@@ -8,7 +8,8 @@ AC_CONFIG_SRCDIR([src/main.c])
 AC_CONFIG_FILES([Makefile
 		tests/Makefile
 		data/ucd.service
-		data/ucd-aws.service])
+		data/ucd-aws.service
+                data/ucd-oci.service])
 AC_CONFIG_HEADERS([config.h])
 
 LT_INIT
diff --git a/data/ucd-oci.service.in b/data/ucd-oci.service.in
new file mode 100644
index 0000000..6605da4
--- /dev/null
+++ b/data/ucd-oci.service.in
@@ -0,0 +1,17 @@
+[Unit]
+Description=micro-config-drive job for OCI
+After=network.target systemd-networkd.service
+Wants=local-fs.target sshd.service sshd-keygen.service
+ConditionPathExists=!/var/lib/cloud/oci-user-data
+
+[Service]
+Type=oneshot
+ExecStart=@prefix@/bin/ucd-oci
+RemainAfterExit=yes
+TimeoutSec=0
+
+# Output needs to appear in instance console output
+StandardOutput=journal+console
+
+[Install]
+WantedBy=multi-user.target
diff --git a/docs/ucd-oci.1 b/docs/ucd-oci.1
new file mode 100644
index 0000000..b0f838f
--- /dev/null
+++ b/docs/ucd-oci.1
@@ -0,0 +1,43 @@
+UCD-OCI(1)                                                          UCD-OCI(1)
+
+
+
+[1mNAME[0m
+       [1mucd-oci [22m- Fetch ssh public key from OCI service
+
+[1mSYNOPSIS[0m
+       [1m/usr/bin/ucd-oci[0m
+
+[1mDESCRIPTION[0m
+       [1mucd-oci  [22ma  helper  program that fetches the SSH pubkey provided to the
+       cloud instance. After fetching the data, ucd-aws creates a  [1m#cloud-con-[0m
+       [1mfig  [22mtext  block  and passes the output to [1mucd[22m(1) for processing/execu-
+       tion.
+
+[1mOPTIONS[0m
+       [1mucd-oci [22mhas no configurable options.
+
+[1mEXIT STATUS[0m
+       On success, 0 is returned, a non-zero failure code otherwise. The  exit
+       code returned may be the exit code of the subsequent [1mucd [22mprogram execu-
+       tion.
+
+[1mCOPYRIGHT[0m
+       +o   Copyright (C) 2017 Intel Corporation, License: CC-BY-SA-3.0
+
+
+
+[1mSEE ALSO[0m
+       [1mucd[22m(1)
+
+[1mNOTES[0m
+       Creative Commons Attribution-ShareAlike 3.0 Unported
+
+       +o   http://creativecommons.org/licenses/by-sa/3.0/
+
+
+
+
+
+
+                                   May 2018                         UCD-OCI(1)
diff --git a/docs/ucd-oci.1.md b/docs/ucd-oci.1.md
new file mode 100644
index 0000000..f06352b
--- /dev/null
+++ b/docs/ucd-oci.1.md
@@ -0,0 +1,37 @@
+ucd-oci(1) -- Fetch ssh public key from OCI service
+========================================================
+
+## SYNOPSIS
+
+`/usr/bin/ucd-oci`
+
+## DESCRIPTION
+
+`ucd-oci` a helper program that fetches the SSH pubkey provided to the
+cloud instance. After fetching the data, ucd-aws creates a
+`#cloud-config` text block and passes the output to `ucd`(1) for
+processing/execution.
+
+## OPTIONS
+
+`ucd-oci` has no configurable options.
+
+## EXIT STATUS
+
+On success, 0 is returned, a non-zero failure code otherwise. The exit
+code returned may be the exit code of the subsequent `ucd` program
+execution.
+
+## COPYRIGHT
+
+ * Copyright (C) 2017 Intel Corporation, License: CC-BY-SA-3.0
+
+## SEE ALSO
+
+`ucd`(1)
+
+## NOTES
+
+Creative Commons Attribution-ShareAlike 3.0 Unported
+
+ * http://creativecommons.org/licenses/by-sa/3.0/
diff --git a/src/ucd-oci.c b/src/ucd-oci.c
new file mode 100644
index 0000000..e7e677c
--- /dev/null
+++ b/src/ucd-oci.c
@@ -0,0 +1,219 @@
+
+/***
+ Copyright Â© 2017 Intel Corporation
+
+ Author: Auke-jan H. Kok <auke-jan.h.kok@intel.com>
+ Author: William Douglas <william.douglas@intel.com>
+
+ This file is part of micro-config-drive.
+
+ micro-config-drive is free software: you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation, either version 3 of the License, or
+ (at your option) any later version.
+
+ micro-config-drive is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with micro-config-drive. If not, see <http://www.gnu.org/licenses/>.
+
+ In addition, as a special exception, the copyright holders give
+ permission to link the code of portions of this program with the
+ OpenSSL library under certain conditions as described in each
+ individual source file, and distribute linked combinations
+ including the two.
+ You must obey the GNU General Public License in all respects
+ for all of the code used other than OpenSSL.  If you modify
+ file(s) with this exception, you may extend this exception to your
+ version of the file(s), but you are not obligated to do so.  If you
+ do not wish to do so, delete this exception statement from your
+ version.  If you delete this exception statement from all source
+ files in the program, then also delete it here.
+***/
+
+#ifdef HAVE_CONFIG_H
+	#include "config.h"
+#endif
+
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+#include <time.h>
+#include <errno.h>
+
+#define FAIL(err) do { perror(err); exit(EXIT_FAILURE); } while(0)
+
+#define OCI_USER_DATA_PATH "/var/lib/cloud"
+#define OCI_USER_DATA "oci-user-data"
+#define OCI_IP "169.254.169.254"
+#define OCI_REQUEST_SSHKEY "GET /opc/v1/instance/metadata/ssh_authorized_keys HTTP/1.0\r\nhost: " OCI_IP "\r\nConnection: keep-alive\r\n\r\n"
+#define CLOUD_CONFIG_OCI_HEADER			\
+	"#cloud-config\n"			\
+	"users:\n"				\
+	"  - name: opc\n"			\
+	"    groups: wheelnopw\n"		\
+	"    gecos: Oracle Public Cloud User\n" \
+	"ssh_authorized_keys:\n"		\
+	"  - "
+
+/*
+ * parse_headers:
+ * f: file descriptor for input (stream)
+ * *cl: output content-length
+ * return values: status code
+ * - 0: an actual error occurred.
+ * - 1: parsed headers OK in full, ready to read content.
+ * - 2: non-200 exit status, but no error in conversation.
+ */
+static int parse_headers(FILE *f, long int *cl)
+{
+	for (;;) {
+		char buf[512];
+		char *r = fgets(buf, sizeof(buf), f);
+		if (!r) {
+			return 0;
+		}
+		if (strncmp(buf, "\r\n", 2) == 0) {
+			/* end of headers */
+			break;
+		} else if (strncmp(buf, "Content-Length:", 15) == 0) {
+			/* content length */
+			*cl = strtol(&buf[16], NULL, 10);
+			if (errno == EINVAL || errno == ERANGE) {
+				return 0;
+			}
+			if (*cl < 0) {
+				errno = ERANGE;
+				return 0;
+			}
+		} else if (strncmp(buf, "HTTP/1.1", 8) == 0) {
+			long int status = strtol(&buf[8], NULL, 10);
+			if (errno == EINVAL || errno == ERANGE) {
+				return 0;
+			}
+			/* fail if non-200 exit code */
+			if (status < 200 && status >= 299 ) {
+				return 2;
+			}
+		}
+	}
+	return 1;
+}
+
+int main(void) {
+	int sockfd;
+
+	sockfd = socket(AF_INET, SOCK_STREAM, 0);
+	if (sockfd < 0) {
+		FAIL("socket()");
+	}
+
+	struct sockaddr_in server;
+	server.sin_family = AF_INET;
+	server.sin_addr.s_addr = inet_addr(OCI_IP);
+	server.sin_port = htons(80);
+
+	struct timespec ts;
+	ts.tv_sec = 0;
+	ts.tv_nsec = 50000000;
+
+	for (;;) {
+		int n = 0;
+		int r = connect(sockfd, (struct sockaddr *)&server, sizeof(server));
+		if (r == 0) {
+			break;
+		}
+		if ((errno != EAGAIN) && (errno != ENETUNREACH) && (errno != ETIMEDOUT)) {
+			FAIL("connect()");
+		}
+		nanosleep(&ts, NULL);
+		if (++n > 200) { /* 10 secs */
+			FAIL("timeout in connect()");
+		}
+	}
+
+	/* First, request the OpenSSH pubkey */
+	char *request = OCI_REQUEST_SSHKEY;
+	size_t len = strlen(request);
+
+	if (write(sockfd, request, len) < (ssize_t)len) {
+		close(sockfd);
+		FAIL("write()");
+	}
+
+	FILE *f = fdopen(sockfd, "r");
+	if (!f) {
+		close(sockfd);
+		FAIL("fdopen()");
+	}
+
+	long int cl;
+	int result = parse_headers(f, &cl);
+	if (result != 1) {
+		close(sockfd);
+		FAIL("parse_headers()");
+	}
+
+	int out;
+	(void) mkdir(OCI_USER_DATA_PATH, 0);
+	(void) unlink(OCI_USER_DATA_PATH "/" OCI_USER_DATA);
+	out = open(OCI_USER_DATA_PATH "/" OCI_USER_DATA, O_WRONLY | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR);
+	if (out < 0) {
+		close(sockfd);
+		FAIL("open()");
+	}
+
+	/* Insert cloud-config header above SSH key. */
+	char *header = CLOUD_CONFIG_OCI_HEADER;
+	len = strlen(header);
+	write(out, header, len);
+
+	for (;;) {
+		if (cl == 0) {
+			break;
+		}
+		size_t len;
+		char buf[512];
+		if ((size_t)cl > sizeof(buf)) {
+			len = sizeof(buf);
+		} else {
+			len = (size_t)cl;
+		}
+		size_t r = fread(buf, 1, len, f);
+		if (ferror(f)) {
+			close(out);
+			fclose(f);
+			unlink(OCI_USER_DATA_PATH "/" OCI_USER_DATA);
+			FAIL("fread()");
+		} else if (r == 0) {
+			break;
+		}
+
+		cl -= (long int)r;
+		if (write(out, buf, r) < (ssize_t)r) {
+			close(out);
+			fclose(f);
+			unlink(OCI_USER_DATA_PATH "/" OCI_USER_DATA);
+			FAIL("write()");
+		}
+	}
+
+	/* cleanup */
+	close(out);
+	fclose(f);
+
+	(void) execl(BINDIR "/ucd", BINDIR "/ucd", "-u",
+			OCI_USER_DATA_PATH "/" OCI_USER_DATA, (char *)NULL);
+	FAIL("exec()");
+}
-- 
2.17.0

